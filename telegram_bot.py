import config
from loguru import logger
import pars
import asyncio
from aiogram import Dispatcher, executor, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import FileIsTooBig
import urllib.request
import emoji
"""  
#   telebot –Ω–µ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–∏–±–∞, –Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏  
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import logging  # Change to loguru
"""

#   print(emoji.demojize('üëçüèª'))     # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∂–∏
#   logging.basicConfig(filename='korablik.log', format='\n%(name)s - %(levelname)s - %(message)s', level=logging.INFO)


logger.add('debug_korablik.log', format='\t{time}  {level}  {message}\n\n',
           level='ERROR', rotation='1 week', compression='zip')  # , serialize=True)     #   –î–ª—è json —Ñ–æ—Ä–º–∞—Ç–∞

bot = Bot(token=config.TOKEN)
dis = Dispatcher(bot)
db = config.DB  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
pdf_file = config.PDF_FILE  # –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ñ–æ–Ω–¥–∞
loop = asyncio.get_event_loop()

BASE_HOST = 'https://korablik-fond.ru/'
HELP_HOST = 'help/'
CHILD_HOST = 'our-children/'
CONTACT_HOST = 'contacts/'
ABOUT_HOST = 'about/'
VACANS_HOST = 'vakansii/'
VOLONTER_HOST = 'join-us/'

START_MESS = '*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {}* ' + emoji.emojize(':waving_hand_light_skin_tone:') + '\n\n' + \
             '–Ø _–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫_ –¥–µ—Ç—Å–∫–æ–≥–æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ –ö–æ—Ä–∞–±–ª–∏–∫. –ö –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!'
FEEDBACK_MESS = '–ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-–Ω–∏–±—É–¥—å –µ—â—ë? ' + emoji.emojize(':winking_face:')
RETURN_MESS = '–ß—Ç–æ –∂, {}, –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –µ—â–µ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å.'
LINK_TRACK = 'utm_source=tg_bot&utm_medium=content&utm_campaign=general&utm_content={}'

#   Start menu Keyboard
button_need_help = KeyboardButton('–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å')  # + emoji.emojize(':face_with_head-bandage:'))
button_can_help = KeyboardButton('–•–æ—á—É –ø–æ–º–æ—á—å')  # + emoji.emojize(':flexed_biceps:'))
button_need_info = KeyboardButton('–•–æ—á—É –∑–Ω–∞—Ç—å —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ñ–æ–Ω–¥')  # + emoji.emojize(':face_with_monocle:'))
button_need_contact = KeyboardButton('–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')  # + emoji.emojize(':link:'))
button_volonter = KeyboardButton('–•–æ—á—É —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º')  # + emoji.emojize(':baby_angel_light_skin_tone:'))
button_need_work = KeyboardButton('–•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å —É –≤–∞—Å')  # + emoji.emojize(':money_with_wings:'))
subscription_button = InlineKeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π')
start_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
start_markup.add(button_need_help, button_can_help, button_need_info)
start_markup.add(button_need_contact)
start_markup.add(button_volonter, button_need_work)
start_markup.add(subscription_button)
#   Back button Keyboard
button_back = KeyboardButton('–ù–∞–∑–∞–¥Ô∏è ' + emoji.emojize(':right_arrow_curving_left_selector:'))
back_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, )
back_markup.add(button_back)
#   Subscription/unsubscription Keyboard
yes_subscribe = InlineKeyboardButton('–î–∞ ' + emoji.emojize(':thumbs_up_light_skin_tone:'), callback_data='yes')
no_subscribe = InlineKeyboardButton('–ù–µ—Ç ' + emoji.emojize(':thumbs_down_light_skin_tone:'), callback_data='no')
yes_unsubscribe = InlineKeyboardButton('–î–∞ ' + emoji.emojize(':thumbs_down_light_skin_tone:'), callback_data='no')
no_unsubscribe = InlineKeyboardButton('–ù–µ—Ç ' + emoji.emojize(':thumbs_up_light_skin_tone:'), callback_data='yes')
subscription_keyboard = InlineKeyboardMarkup()
unsubscription_keyboard = InlineKeyboardMarkup()
subscription_keyboard.add(yes_subscribe, no_subscribe)
unsubscription_keyboard.add(yes_unsubscribe, no_unsubscribe)


@dis.message_handler(commands=['start'])
async def start_command(message):
    if not db.users_exists(message.from_user.id):
        db.add_user(message.from_user.id)
        print('user add')
    else:
        pass
    await bot.send_message(message.chat.id, START_MESS.format(message.chat.first_name),
                           reply_markup=start_markup, parse_mode='Markdown')


@dis.message_handler(commands=['help'])
async def help_command(message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('Message the developer', url='telegram.me/chernobrovka'))
    await bot.send_message(message.chat.id, 'You can send message to developer!', reply_markup=keyboard)


@dis.message_handler(content_types=['text'])
async def need_help_command(message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã """
    #   bot.send_message(message.chat.id, message.text[0:])
    # #   –ö–Ω–æ–ø–∫–∞ "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
    if message.text[0:3].lower() == '–º–Ω–µ' or message.text.lower() == '–ø–æ–º–æ—â—å':
        try:
            infos = pars.get_memo(pars.get_parser(BASE_HOST + HELP_HOST).text)
            mes = '\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è.\n\n' + \
                  str(infos['lead']) + str(infos['spisok'])
            keyboard = InlineKeyboardMarkup()
            button_help_host = InlineKeyboardButton(text='–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞',
                                                    url=BASE_HOST + '?' + HELP_HOST + LINK_TRACK.format(
                                                        message.from_user.id))
            keyboard.add(button_help_host)
            await bot.send_message(message.chat.id, mes, reply_markup=keyboard)
            await bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)
        except Exception as error:
            print("error get_memo: {}".format(error))

    # #   –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É –ø–æ–º–æ—á—å"
    elif message.text[0:11].lower() == '—Ö–æ—á—É –ø–æ–º–æ—á—å' or message.text.lower() == '–ø–æ–º–æ—á—å':
        mes_1 = '–≠—Ç–æ —á—É–¥–µ—Å–Ω–æ! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ –ø–æ–º–æ—â–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:'
        await bot.send_message(message.chat.id, mes_1)
        # t_start = perf_counter()
        childs = pars.get_all_content(pars.get_parser(BASE_HOST + CHILD_HOST).text)
        # t_stop = perf_counter()
        # print("Elapsed time:", t_start, t_stop)
        for dic in childs:
            mes = '*' + str(dic['name']) + '*\n\n' + str(dic['age']) + '\n' + str(dic['city']) + \
                  '\n' + str(dic['diagnoz']) + '\n' + '\n_' + str(dic['money'] + '_')
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('–ü–æ–º–æ—á—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
                                              url=str(dic['link']) + '&' + LINK_TRACK.format(
                                                  message.from_user.id)))
            await bot.send_photo(message.chat.id, str(dic['img']))
            await bot.send_message(message.chat.id, mes +
                                   '\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ _—Å—Å—ã–ª–∫–µ_ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Ä–µ–±–µ–Ω–∫–∞.',
                                   reply_markup=keyboard, parse_mode='Markdown')
        await bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ñ–æ–Ω–¥"
    elif message.text[0:10].lower() == '—Ö–æ—á—É –∑–Ω–∞—Ç—å' or message.text.lower() == '—Ñ–æ–Ω–¥':
        await bot.send_document(message.chat.id, pdf_file)
        mes = '\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –Ω–∞–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π! \n' \
              '–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–µ —Å–∞–π—Ç–∞.'
        keyboad = InlineKeyboardMarkup()
        keyboad.add(InlineKeyboardButton('–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞', url=BASE_HOST + ABOUT_HOST))
        await bot.send_message(message.chat.id, mes, reply_markup=keyboad)
        await bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
    elif message.text[0:13].lower() == '—Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å' or message.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å':
        cont_req = pars.get_contacts(pars.get_parser(BASE_HOST + CONTACT_HOST).text)
        for dic in cont_req:
            mes_cont = '\n_–¢–µ–ª–µ—Ñ–æ–Ω: _' + str(dic['phone']) + '\n_–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: _' + \
                       str(dic['mail']) + '\n_–ê–¥—Ä–µ—Å: _' + str(dic['adres'])  # str(dic['links']) - —Å–æ—Ü—Å–µ—Ç–∏
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã',
                                              url=str(dic['point']) + '&' + LINK_TRACK.format(
                                                  message.from_user.id)))
            await bot.send_message(message.chat.id, '*–ö–û–ù–¢–ê–ö–¢–´\n*' + mes_cont, reply_markup=keyboard,
                                   parse_mode='Markdown')
            link_mess = '–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏:'
            link_keyboard = InlineKeyboardMarkup(row_width=2)
            vk_link = InlineKeyboardButton('–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', url=dic['links'][0])
            fb_link = InlineKeyboardButton('Facebook', url=dic['links'][1])
            ins_link = InlineKeyboardButton('Instagram', url=dic['links'][2])
            ok_link = InlineKeyboardButton('–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', url=dic['links'][3])
            link_keyboard.add(vk_link, fb_link, ins_link, ok_link)
            await bot.send_message(message.chat.id, link_mess, reply_markup=link_keyboard)
            mes_req = str(dic['regist']) + '\n' + str(dic['ogrn']) + '\n' + str(dic['inn']) + '\n' + \
                      str(dic['ur_adr']) + '\n' + str(dic['r_s']) + '\n' + str(dic['k_c']) + '\n' + \
                      str(dic['filial']) + '\n' + str(dic['bik']) + '\n' + str(dic['swift'])
            await bot.send_message(message.chat.id, '*–†–ï–ö–í–ò–ó–ò–¢–´\n\n*' + mes_req, parse_mode='Markdown')
        await bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ "–í–æ–ª–æ–Ω—Ç–µ—Ä"
    elif message.text[0:10].lower() == '—Ö–æ—á—É —Å—Ç–∞—Ç—å':
        mes = '*–≠—Ç–æ –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ!* \n–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É.\n' + \
              pars.get_volonter(pars.get_parser(BASE_HOST + VOLONTER_HOST).text)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞',
                                          url=BASE_HOST + VOLONTER_HOST + '?' + LINK_TRACK.format(
                                              message.from_user.id)))
        await bot.send_message(message.chat.id, mes, reply_markup=keyboard, parse_mode='Markdown')
        await bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å"
    elif message.text[0:13].lower() == '—Ö–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å':
        vacancy = pars.get_vacancy(pars.get_parser(BASE_HOST + VACANS_HOST).text)
        mes = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n'
        for div in vacancy:
            mes = mes + div + '\n'
            '''try:
                bot.send_message(message.chat.id, mes)
            except:
                print('Too long message')'''
        link_mes = '\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º –ø–æ—Å–µ—Ç–∏—Ç–µ *–Ω–∞—à —Å–∞–π—Ç*!'
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞',
                                          url=BASE_HOST + VACANS_HOST + '?' + LINK_TRACK.format(
                                              message.from_user.id)))
        await bot.send_message(message.chat.id, mes + link_mes, reply_markup=keyboard, parse_mode='Markdown')
        help_mes = '–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞ –ø–æ—á—Ç—É hr@korablik-fond.ru' + \
                   ' –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ú—ã —Ä–∞–¥—ã –≤—Å–µ–º!'
        await bot.send_message(message.chat.id, help_mes, parse_mode='Markdown')
        await bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
    elif message.text[0:10].lower() == '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
        if not db.subscriber_exist(message.from_user.id):
            await bot.send_message(message.chat.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è?',
                                   reply_markup=subscription_keyboard)
        else:
            await bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è..?',
                                   reply_markup=unsubscription_keyboard)

    # #   –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    elif message.text[0:5].lower() == '–Ω–∞–∑–∞–¥':
        await bot.send_message(message.chat.id, RETURN_MESS.format(message.chat.first_name),
                               reply_markup=start_markup, parse_mode='Markdown')

    # #   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    else:
        try:
            await bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ' +
                                   emoji.emojize(':pensive_face:') + '\n*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!*', parse_mode='Markdown')
        except Exception as err:
            print('Something wrong! Exception: {}'.format(err))


@dis.message_handler(content_types=['document'])
async def handle_doc(message):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—é–º–µ """
    doc_id = message.document.file_id
    doc_name = message.document.file_name
    try:
        file_info = await bot.get_file(doc_id)  # max 20 MB
        #   file.file_path = 'C:/Users/User/Documents/PycharmProjects/Korablik/'
        urllib.request.urlretrieve(f'http://api.telegram.org/file/bot{config.TOKEN}/{file_info.file_path}',
                                   f'./documents/{doc_name}')
        await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Ä–µ–∑—é–º–µ –ø—Ä–∏–Ω—è—Ç–æ!')
    except FileIsTooBig:
        error_mes = '–§–∞–π–ª —Å–ª–∏—à–∫–æ–π –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä - 20–ú–ë\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª'
        await bot.send_message(message.chat.id, error_mes)


@dis.callback_query_handler(lambda call: True)
async def subscription_command(call):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ """
    await bot.answer_callback_query(call.id)
    if call.data == 'yes':
        db.update_subscription(call.from_user.id, True)
        await bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.')
        await bot.send_message(call.message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)
    elif call.data == 'no':
        db.update_subscription(call.from_user.id, False)
        await bot.send_message(call.message.chat.id, '–ñ–∞–ª—å... –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã')
        await bot.send_message(call.message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)


async def send_discribution():
    """ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤—ã—Ö –¥–µ—Ç–µ–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º """
    while True:
        await asyncio.sleep(10)     # 10 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, 259200 (3*24*60*60) - 3 –¥–Ω—è

        new_child = pars.new_child(pars.get_parser(BASE_HOST + CHILD_HOST).text)

        if new_child:
            subscribers = db.get_subscriptions()
            for dic in new_child:
                mes = '*' + str(dic['name']) + '*\n\n' + str(dic['age']) + '\n' + str(dic['city']) + \
                      '\n' + str(dic['diagnoz']) + '\n' + '\n_' + str(dic['money'] + '_')
                for sub in subscribers:
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton('–ü–æ–º–æ—á—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
                                                      url=str(dic['link']) + '&' + LINK_TRACK.format(
                                                          sub[1])))
                    await bot.send_photo(sub[1], str(dic['img']))
                    await bot.send_message(sub[1], mes +
                                           '\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ _—Å—Å—ã–ª–∫–µ_ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Ä–µ–±–µ–Ω–∫–∞.',
                                           reply_markup=keyboard, parse_mode='Markdown')


if __name__ == '__main__':
    loop.create_task(send_discribution())
    executor.start_polling(dis, skip_updates=True)
