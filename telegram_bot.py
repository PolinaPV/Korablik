import config
import logging
import urllib.request
import pars
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import emoji
from sqliter import SQLiter

#   print(emoji.demojize('üòâ'))
#   print(emoji.emojize(':red_heart:'))
#   print('–Ω–∞–∑–∞–¥ ' + emoji.emojize(':right_arrow_curving_left_selector:', variant="emoji_type"))

logging.basicConfig(level=logging.INFO)

BASE_HOST = 'https://korablik-fond.ru/'
HELP_HOST = 'help/'
CHILD_HOST = 'our-children/'
CONTACT_HOST = 'contacts/'
#   REP_HOST = 'reporting/'
ABOUT_HOST = 'about/'
VACANS_HOST = 'vakansii/'
VOLONTER_HOST = 'join-us/'

PDF_FILE = open('–§–æ–Ω–¥ –ö–æ—Ä–∞–±–ª–∏–∫.pdf', 'rb')

bot = telebot.TeleBot(config.TOKEN)
#   print(dir(bot))
START_MESS = '*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {}* ' + emoji.emojize(':waving_hand_light_skin_tone:') + '\n\n' + \
             '–Ø _–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫_ –¥–µ—Ç—Å–∫–æ–≥–æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ –ö–æ—Ä–∞–±–ª–∏–∫. –ö –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!'
FEEDBACK_MESS = '–ú–æ–≥—É –ø–æ–º–æ—á—å —á–µ–º-–Ω–∏–±—É–¥—å –µ—â—ë? ' + emoji.emojize(':winking_face:')
RETURN_MESS = '–ß—Ç–æ –∂, {}, –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –µ—â–µ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å'

#   Start menu Keyboard
button_need_help = KeyboardButton('–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å')  # + emoji.emojize(':face_with_head-bandage:'))
button_can_help = KeyboardButton('–•–æ—á—É –ø–æ–º–æ—á—å')  # + emoji.emojize(':flexed_biceps:'))
button_need_info = KeyboardButton('–•–æ—á—É –∑–Ω–∞—Ç—å —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ñ–æ–Ω–¥')  # + emoji.emojize(':face_with_monocle:'))
button_need_contact = KeyboardButton('–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')  # + emoji.emojize(':link:'))
button_volonter = KeyboardButton('–•–æ—á—É —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º')  # + emoji.emojize(':baby_angel_light_skin_tone:'))
button_need_work = KeyboardButton('–•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å —É –≤–∞—Å')  # + emoji.emojize(':money_with_wings:'))
start_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
start_markup.add(button_need_help, button_can_help, button_need_info)
start_markup.add(button_need_contact)
start_markup.add(button_volonter, button_need_work)
#   Back button Keyboard
button_back = KeyboardButton('–ù–∞–∑–∞–¥Ô∏è ' + emoji.emojize(':right_arrow_curving_left_selector:'))
back_markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, )
back_markup.add(button_back)


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, START_MESS.format(message.chat.first_name),
                     reply_markup=start_markup, parse_mode='Markdown')


@bot.message_handler(commands=['help'])
def help_command(message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('Message the developer', url='telegram.me/chernobrovka'))
    bot.send_message(message.chat.id, 'You can send message to developer!', reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def need_help_command(message):
    #   bot.send_message(message.chat.id, message.text[0:])
    # #   –ö–Ω–æ–ø–∫–∞ "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"
    if message.text[0:3].lower() == '–º–Ω–µ' or message.text.lower() == '–ø–æ–º–æ—â—å':
        try:
            infos = pars.get_memo(pars.get_parser(BASE_HOST + HELP_HOST).text)
            mes = '\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è.\n\n' + \
                  str(infos['lead']) + str(infos['spisok'])
            keyboard = InlineKeyboardMarkup()
            button_help_host = InlineKeyboardButton(text='–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞', url=BASE_HOST + HELP_HOST)
            keyboard.add(button_help_host)
            bot.send_message(message.chat.id, mes, reply_markup=keyboard)
            bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)
        except:
            print("error get_memo")

    # #   –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É –ø–æ–º–æ—á—å"
    elif message.text[0:11].lower() == '—Ö–æ—á—É –ø–æ–º–æ—á—å' or message.text.lower() == '–ø–æ–º–æ—á—å':
        mes_1 = '–≠—Ç–æ —á—É–¥–µ—Å–Ω–æ! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ –ø–æ–º–æ—â–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:'
        bot.send_message(message.chat.id, mes_1)
        childs = pars.get_all_content(pars.get_parser(BASE_HOST + CHILD_HOST).text)
        for dic in childs:
            mes = '*' + str(dic['name']) + '*\n\n' + str(dic['age']) + '\n' + str(dic['city']) + \
                  '\n' + str(dic['diagnoz']) + '\n' + '\n_' + str(dic['money'] + '_')
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('–ü–æ–º–æ—á—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!', url=str(dic['link'])))
            bot.send_photo(message.chat.id, str(dic['img']))
            bot.send_message(message.chat.id, mes +
                             '\n\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ _—Å—Å—ã–ª–∫–µ_ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—á–∫—É —Ä–µ–±–µ–Ω–∫–∞.',
                             reply_markup=keyboard, parse_mode='Markdown')
        bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ñ–æ–Ω–¥"
    elif message.text[0:10].lower() == '—Ö–æ—á—É –∑–Ω–∞—Ç—å' or message.text.lower() == '—Ñ–æ–Ω–¥':
        bot.send_document(message.chat.id, PDF_FILE)
        mes = '\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–µ —Å–∞–π—Ç–∞.'
        keyboad = InlineKeyboardMarkup()
        keyboad.add(InlineKeyboardButton('–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞', url=BASE_HOST + ABOUT_HOST))
        bot.send_message(message.chat.id, mes, reply_markup=keyboad)

        bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"
    elif message.text[0:13].lower() == '—Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å' or message.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å':
        cont_req = pars.get_contacts(pars.get_parser(BASE_HOST + CONTACT_HOST).text)
        for dic in cont_req:
            mes_cont = '_–¢–µ–ª–µ—Ñ–æ–Ω: _' + str(dic['phone']) + '\n_–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: _' + \
                       str(dic['mail']) + '\n_–ê–¥—Ä–µ—Å: _' + str(dic['adres'])  # str(dic['links']) - —Å–æ—Ü—Å–µ—Ç–∏
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã', url=str(dic['point'])))
            bot.send_message(message.chat.id, '*–ö–û–ù–¢–ê–ö–¢–´\n\n*' + mes_cont, reply_markup=keyboard, parse_mode='Markdown')
            link_mess = '–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏:'
            link_keyboard = InlineKeyboardMarkup(row_width=2)
            vk_link = InlineKeyboardButton('–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', url=dic['links'][0])
            fb_link = InlineKeyboardButton('Facebook', url=dic['links'][1])
            ins_link = InlineKeyboardButton('Instagram', url=dic['links'][2])
            ok_link = InlineKeyboardButton('–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', url=dic['links'][3])
            link_keyboard.add(vk_link, fb_link, ins_link, ok_link)
            bot.send_message(message.chat.id, link_mess, reply_markup=link_keyboard)

            mes_req = str(dic['regist']) + '\n' + str(dic['ogrn']) + '\n' + \
                      str(dic['inn']) + '\n' + str(dic['ur_adr']) + '\n' + str(dic['r_s']) + \
                      '\n' + str(dic['k_c']) + '\n' + str(dic['filial']) + '\n' + str(dic['bik']) + \
                      '\n' + str(dic['swift'])
            bot.send_message(message.chat.id, '*–†–ï–ö–í–ò–ó–ò–¢–´\n\n*' + mes_req, parse_mode='Markdown')
        bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ "–í–æ–ª–æ–Ω—Ç–µ—Ä"
    elif message.text[0:10].lower() == '—Ö–æ—á—É —Å—Ç–∞—Ç—å':
        mes = '*–≠—Ç–æ –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ!* \n–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É.\n' + \
              pars.get_volonter(pars.get_parser(BASE_HOST + VOLONTER_HOST).text)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞', url=BASE_HOST + VOLONTER_HOST))
        bot.send_message(message.chat.id, mes, reply_markup=keyboard, parse_mode='Markdown')
        bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # #   –ö–Ω–æ–ø–∫–∞ "–•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å"
    elif message.text[0:13].lower() == '—Ö–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å':
        vacancy = pars.get_vacancy(pars.get_parser(BASE_HOST + VACANS_HOST).text)
        mes = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n'
        for div in vacancy:
            mes = mes + div + '\n'
            '''try:
                bot.send_message(message.chat.id, mes)
            except:
                print('Too long message')'''
        link_mes = '\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º –ø–æ—Å–µ—Ç–∏—Ç–µ *–Ω–∞—à —Å–∞–π—Ç*!'
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞', url=BASE_HOST + VACANS_HOST))
        bot.send_message(message.chat.id, mes + link_mes, reply_markup=keyboard, parse_mode='Markdown')
        help_mes = '–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞ –ø–æ—á—Ç—É hr@korablik-fond.ru' + \
                   ' –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ. –ú—ã —Ä–∞–¥—ã –≤—Å–µ–º!'
        bot.send_message(message.chat.id, help_mes, parse_mode='Markdown')
        bot.send_message(message.chat.id, FEEDBACK_MESS, reply_markup=back_markup)

    # # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    elif message.text[0:5].lower() == '–Ω–∞–∑–∞–¥':
        bot.send_message(message.chat.id, RETURN_MESS.format(message.chat.first_name),
                         reply_markup=start_markup, parse_mode='Markdown')

    else:
        try:
            bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ' +
                             emoji.emojize(':pensive_face:') + '\n*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!*', parse_mode='Markdown')
        except Exception as err:
            print('Something wrong! Exception: '.format(err))


@bot.message_handler(content_types=['document'])
def handle_doc(message):
    doc_id = message.document.file_id
    file_info = bot.get_file(doc_id)
    #   file.file_path = 'C:/Users/User/Documents/PycharmProjects/Korablik/'
    print(file_info)
    #   print(file.file_path)
    try:
        urllib.request.urlretrieve(f'http://api.telegram.org/file/bot{config.TOKEN}/{file_info.file_path}',
                                   file_info.file_path)
        bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Ä–µ–∑—é–º–µ –ø—Ä–∏–Ω—è—Ç–æ!')
    except:
        print('Error get file')


@bot.message_handler(func=lambda message: True)
def error_command(message):
    try:
        bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã :(')
    except Exception as err:
        print('Something wrong! Exception: '.format(err))


def main():
    bot.polling(none_stop=True, interval=0)


if __name__ == '__main__':
    main()
